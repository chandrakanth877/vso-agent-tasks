// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/d0bed69cdb8cfb3ab1d004bfab0222e51c1e0ff8/ltx/lib/Element.d.ts
declare module '~ltx/lib/Element' {
/**
 * Element
 *
 * Attributes are in the element.attrs object. Children is a list of
 * either other Elements or Strings for text content.
 **/
export class Element {
    name: string;
    parent: Element;
    children: Element[];
    attrs: any;

    constructor(name: string, attrs?: any);

    /**
     * if (element.is('message', 'jabber:client')) ...
     **/
    is(name: string, xmlns?: any): boolean;

    /**
     * without prefix.
     */
    getName(): string;

    /**
     * retrieves the namespace of the current element, upwards recursively
     **/
    getNS(): any;

    /**
     * find the namespace to the given prefix, upwards recursively
     **/
    findNS(prefix: string): any;

    /**
     * Recursiverly gets all xmlns defined, in the form of {url:prefix}
     **/
    getXmlns(): any;

    setAttrs(attrs: any): void;

    /**
     * xmlns can be null, returns the matching attribute.
     **/
    getAttr(name: string, xmlns?: any): any;

    /**
     * xmlns can be null
     **/
    getChild(name: string, xmlns?: any): Element;

    /**
     * xmlns can be null
     **/
    getChildren(name: string, xmlns?: any): Element[];

    /**
     * xmlns and recursive can be null
     **/
    getChildByAttr(attr: any, val: any, xmlns?: any, recursive?: any): Element;


    /**
     * xmlns and recursive can be null
     **/
    getChildrenByAttr(attr: any, val: any, xmlns?: any, recursive?: any): Element[];

    getText(): string;

    getChildText(name: string, xmlns: any): string;

    /**
     * Return all direct descendents that are Elements.
     * This differs from `getChildren` in that it will exclude text nodes,
     * processing instructions, etc.
     */
    getChildElements(): Element[];

    /** returns uppermost parent */
    root(): Element;

    tree(): Element;

    /** just parent or itself */
    up(): Element;

    /** create child node and return it */
    c(name: string, attrs?: any): Element;

    /** add text node and return element */
    t(text: string): Element;

    /**
     * Either:
     *   el.remove(childEl)
     *   el.remove('author', 'urn:...')
     */
    remove(el: Element, xmlns?: any): Element;

    clone(): Element;

    text(val: string): string;

    attr(attr: any, val: any): any;

    toString(): string;

    toJSON(): any;

    write(writer: any): void;

    nameEquals(el: Element): boolean;

    attrsEquals(el: Element): boolean;

    childrenEquals(el: Element): boolean;

    equals(el: Element): boolean;
}
}
declare module 'ltx/lib/Element' {
export * from '~ltx/lib/Element';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/d0bed69cdb8cfb3ab1d004bfab0222e51c1e0ff8/ltx/lib/equal.d.ts
declare module '~ltx/lib/equal' {
export function nameEqual(a: any, b: any): boolean;
export function attrsEqual(a: any, b: any): boolean;
export function childrenEqual(a: any, b: any): boolean;
export function equal(a: any, b: any): boolean;
}
declare module 'ltx/lib/equal' {
export * from '~ltx/lib/equal';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/d0bed69cdb8cfb3ab1d004bfab0222e51c1e0ff8/ltx/lib/is.d.ts
declare module '~ltx/lib/is' {
export function isNode(el: any): boolean;
export function isElement(el: any): boolean;
export function isText(el: any): boolean;
}
declare module 'ltx/lib/is' {
export * from '~ltx/lib/is';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/d0bed69cdb8cfb3ab1d004bfab0222e51c1e0ff8/ltx/lib/clone.d.ts
declare module '~ltx/lib/clone' {
export function clone(el: any): any;
}
declare module 'ltx/lib/clone' {
export * from '~ltx/lib/clone';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/d0bed69cdb8cfb3ab1d004bfab0222e51c1e0ff8/ltx/lib/createElement.d.ts
declare module '~ltx/lib/createElement' {
import {Element} from '~ltx/lib/Element';
export function createElement(name: string, attrs: any): Element;
}
declare module 'ltx/lib/createElement' {
export * from '~ltx/lib/createElement';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/d0bed69cdb8cfb3ab1d004bfab0222e51c1e0ff8/ltx/lib/escape.d.ts
declare module '~ltx/lib/escape' {
export function escapeXML(s: string): string;
export function unescapeXML(s: string): string;
export function escapeXMLText(s: string): string;
export function unescapeXMLText(s: string): string;
}
declare module 'ltx/lib/escape' {
export * from '~ltx/lib/escape';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/d0bed69cdb8cfb3ab1d004bfab0222e51c1e0ff8/ltx/lib/Parser.d.ts
declare module '~ltx/lib/Parser' {
/// <reference types="node" />
import {EventEmitter} from 'events';
export class Parser extends EventEmitter {
    constructor(options?: any);
}
}
declare module 'ltx/lib/Parser' {
export * from '~ltx/lib/Parser';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/d0bed69cdb8cfb3ab1d004bfab0222e51c1e0ff8/ltx/lib/parse.d.ts
declare module '~ltx/lib/parse' {
export function parse(data: any, options?: any): any;
}
declare module 'ltx/lib/parse' {
export * from '~ltx/lib/parse';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/d0bed69cdb8cfb3ab1d004bfab0222e51c1e0ff8/ltx/lib/tag.d.ts
declare module '~ltx/lib/tag' {
export function tag(d: any): any;
}
declare module 'ltx/lib/tag' {
export * from '~ltx/lib/tag';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/d0bed69cdb8cfb3ab1d004bfab0222e51c1e0ff8/ltx/lib/tagString.d.ts
declare module '~ltx/lib/tagString' {
export function tagString(d: any): string;
}
declare module 'ltx/lib/tagString' {
export * from '~ltx/lib/tagString';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/d0bed69cdb8cfb3ab1d004bfab0222e51c1e0ff8/ltx/lib/stringify.d.ts
declare module '~ltx/lib/stringify' {
export function stringify(el: any, indent: any, level: any): string;
}
declare module 'ltx/lib/stringify' {
export * from '~ltx/lib/stringify';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/d0bed69cdb8cfb3ab1d004bfab0222e51c1e0ff8/ltx/index.d.ts
declare module '~ltx/index' {
// Type definitions for ltx 2.6
// Project: github.com/node-xmpp/ltx/
// Definitions by: PJakcson <https://github.com/PJakcson>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.1

export {Element} from '~ltx/lib/Element'
export {nameEqual, attrsEqual, childrenEqual, equal} from '~ltx/lib/equal';
export {isNode, isElement, isText} from '~ltx/lib/is';
export {clone} from '~ltx/lib/clone';
export {createElement} from '~ltx/lib/createElement';
export {escapeXML, unescapeXML, escapeXMLText, unescapeXMLText} from '~ltx/lib/escape';
export {Parser} from '~ltx/lib/Parser';
export {parse} from '~ltx/lib/parse';
export {tag} from '~ltx/lib/tag';
export {tagString} from '~ltx/lib/tagString';
export {stringify} from '~ltx/lib/stringify';
}
declare module 'ltx/index' {
export * from '~ltx/index';
}
declare module 'ltx' {
export * from '~ltx/index';
}
